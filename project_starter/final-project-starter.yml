AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Network Infra for Udacity Cloud Formation Project

Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
    Description: Environment name
    Type: String
  AMItoUse:
    Description: AMI to use for our base image
    Type: String
  InstanceType:
    Description: WebServer Instance Type
    Type: String
    AllowedValues:
      - t3.medium
      - t2.medium
    Default: t2.medium

Resources:
  # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
  # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description:
        This is the role to be assumed by the EC2 resource for accessing S3 buckets
      MaxSessionDuration:
        3600
      Policies:
        - PolicyName: S3ReadOnly
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action: 
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3-object-lambda:Get*'
                  - 's3-object-lambda:List*'
                Resource: '*'
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  OurLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMItoUse
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      BlockDeviceMappings:
        - DeviceName: /dev/sdh
          Ebs:
            VolumeSize: 10
      SecurityGroups: 
        - !Ref ServerAccessSG
      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt-get update -y
            sudo apt-get install apache2 -y
            sudo systemctl start apache2.service
            cd /var/www/html
            echo "Udacity Demo Web Server Up and Running!" > index.html

  LBAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http port 80 communication to and from our load balancer
        GroupName: SGLBGroup
        VpcId:
          Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            DestinationSecurityGroupId:
              !Ref ServerAccessSG

  ServerAccessSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http port 80 into our test host and unrestricted access out
        GroupName: SGResourceGroup
        VpcId:
          Fn::ImportValue: !Sub "${EnvironmentName}-VPC"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId:
              !Ref LBAccessSG

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        !Ref myVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Sub1

  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        !Ref myVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Sub2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        !Ref myVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Sub1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        !Ref myVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private-Sub2

  UdagramIGAccess:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IG

  IGAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref UdagramIGAccess
      VpcId: !Ref myVPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC

  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: IGAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref UdagramIGAccess
      RouteTableId: !Ref RouteTable

  PubSubRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet1

  PubSubRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnet2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: IGAttachment
    Properties:
      Domain: vpc

  EIP1:
    Type: AWS::EC2::EIP
    DependsOn: IGAttachment
    Properties:
        Domain: vpc

  EIP2:
    Type: AWS::EC2::EIP
    DependsOn: IGAttachment
    Properties:
        Domain: vpc

  NatGateway1: 
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        !Ref PublicSubnet1
      AllocationId:
        Fn::GetAtt:
          - EIP1
          - AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${EnvironmentName}-Nat1

  NatGateway2: 
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId:
        !Ref PublicSubnet2
      AllocationId:
        Fn::GetAtt:
          - EIP2
          - AllocationId
      Tags:
       - Key: Name
         Value: !Sub ${EnvironmentName}-Nat2

  PrivSubRT1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC

  PrivSubRT2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivSubRT1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivSubRT2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivSubRTAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivSubRT1
      SubnetId: !Ref PrivateSubnet1

  PrivSubRTAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivSubRT2
      SubnetId: !Ref PrivateSubnet2

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - Ref: LBAccessSG
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Sub1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-Public-Sub2"

  ServerAutoScalingGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref OurLaunchConfig
      MaxSize: '4'
      MinSize: '2'
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-Private-Sub1"
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-Private-Sub2"
      TargetGroupARNs:
        - Ref: TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-myVPC"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP
  
  LBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: 
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1
  
Outputs:
  IamProfile:
    Description: Instance profile for accessing S3
    Value: !Ref ProfileWithRolesForOurApp
  VPC: 
    Description: VPC for Udagram
    Value: !Ref myVPC
  PublicSubnetAZ1:
    Description: Public Subnet in first AZ
    Value: !Ref PublicSubnet1
  PublicSubnetAZ2:
    Description: Public Subnet in Second AZ
    Value: !Ref PublicSubnet2
  PrivateSubnetAZ1:
    Description: Private Subnet in first AZ
    Value: !Ref PrivateSubnet1
  PrivateSubnetAZ2:
    Description: Private Subnet in Second AZ
    Value: !Ref PrivateSubnet2
  ServerAccessSG:
    Description: Security Group for WebServers connected to Load Balancers
    Value: !Ref ServerAccessSG
  LoadBalancerSG:
    Description: LoadBalancer Security Group
    Value: !Ref LBAccessSG
  LoadBalancerDns:
    Description: DNS name for the loadbalancer
    Value: !GetAtt LoadBalancer.DNSName

  # This is also optional.
  # Bonus points for useful outputs!
  # for example, if you create a Load Balancer
  # it's nice to output the URL to it here, so that we don't have to go to the console to get it.
# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "Udacity Demo Web Server Up and Running!" > index.html
